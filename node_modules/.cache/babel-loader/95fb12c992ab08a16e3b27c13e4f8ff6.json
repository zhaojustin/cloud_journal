{"ast":null,"code":"const _ = require('lodash');\n\nconst GoogleSpreadsheetRow = require('./GoogleSpreadsheetRow');\n\nconst GoogleSpreadsheetCell = require('./GoogleSpreadsheetCell');\n\nconst {\n  getFieldMask,\n  columnToLetter,\n  letterToColumn\n} = require('./utils');\n\nfunction checkForDuplicateHeaders(headers) {\n  // check for duplicate headers\n  const checkForDupes = _.groupBy(headers); // { c1: ['c1'], c2: ['c2', 'c2' ]}\n\n\n  _.each(checkForDupes, (grouped, header) => {\n    if (!header) return; // empty columns are skipped, so multiple is ok\n\n    if (grouped.length > 1) {\n      throw new Error(`Duplicate header detected: \"${header}\". Please make sure all non-empty headers are unique`);\n    }\n  });\n}\n\nclass GoogleSpreadsheetWorksheet {\n  constructor(parentSpreadsheet, _ref) {\n    let {\n      properties,\n      data\n    } = _ref;\n    this._spreadsheet = parentSpreadsheet; // the parent GoogleSpreadsheet instance\n\n    this._headerRowIndex = 1; // assume \"header row\" (for row-based calls) is in first row\n    // basic properties\n\n    this._rawProperties = properties;\n    this._cells = []; // we will use a 2d sparse array to store cells;\n\n    this._rowMetadata = []; // 1d sparse array\n\n    this._columnMetadata = [];\n    if (data) this._fillCellData(data);\n    return this;\n  } // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n\n\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    // pass the call up to the parent\n    return this._spreadsheet._makeSingleUpdateRequest(requestType, { // sheetId: this.sheetId,\n      ...requestParams\n    });\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) {\n      throw new Error('You must call `doc.loadInfo()` again before accessing this property');\n    }\n  }\n\n  resetLocalCache(dataOnly) {\n    if (!dataOnly) this._rawProperties = null;\n    this.headerValues = null;\n    this._headerRowIndex = 1;\n    this._cells = [];\n  }\n\n  _fillCellData(dataRanges) {\n    _.each(dataRanges, range => {\n      const startRow = range.startRow || 0;\n      const startColumn = range.startColumn || 0;\n      const numRows = range.rowMetadata.length;\n      const numColumns = range.columnMetadata.length; // update cell data for entire range\n\n      for (let i = 0; i < numRows; i++) {\n        const actualRow = startRow + i;\n\n        for (let j = 0; j < numColumns; j++) {\n          const actualColumn = startColumn + j; // if the row has not been initialized yet, do it\n\n          if (!this._cells[actualRow]) this._cells[actualRow] = []; // see if the response includes some info for the cell\n\n          const cellData = _.get(range, `rowData[${i}].values[${j}]`); // update the cell object or create it\n\n\n          if (this._cells[actualRow][actualColumn]) {\n            this._cells[actualRow][actualColumn]._updateRawData(cellData);\n          } else {\n            this._cells[actualRow][actualColumn] = new GoogleSpreadsheetCell(this, actualRow, actualColumn, cellData);\n          }\n        }\n      } // update row metadata\n\n\n      for (let i = 0; i < range.rowMetadata.length; i++) {\n        this._rowMetadata[startRow + i] = range.rowMetadata[i];\n      } // update column metadata\n\n\n      for (let i = 0; i < range.columnMetadata.length; i++) {\n        this._columnMetadata[startColumn + i] = range.columnMetadata[i];\n      }\n    });\n  } // PROPERTY GETTERS //////////////////////////////////////////////////////////////////////////////\n\n\n  _getProp(param) {\n    this._ensureInfoLoaded();\n\n    return this._rawProperties[param];\n  }\n\n  _setProp(param, newVal) {\n    // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get sheetId() {\n    return this._getProp('sheetId');\n  }\n\n  get title() {\n    return this._getProp('title');\n  }\n\n  get index() {\n    return this._getProp('index');\n  }\n\n  get sheetType() {\n    return this._getProp('sheetType');\n  }\n\n  get gridProperties() {\n    return this._getProp('gridProperties');\n  }\n\n  get hidden() {\n    return this._getProp('hidden');\n  }\n\n  get tabColor() {\n    return this._getProp('tabColor');\n  }\n\n  get rightToLeft() {\n    return this._getProp('rightToLeft');\n  }\n\n  set sheetId(newVal) {\n    return this._setProp('sheetId', newVal);\n  }\n\n  set title(newVal) {\n    return this._setProp('title', newVal);\n  }\n\n  set index(newVal) {\n    return this._setProp('index', newVal);\n  }\n\n  set sheetType(newVal) {\n    return this._setProp('sheetType', newVal);\n  }\n\n  set gridProperties(newVal) {\n    return this._setProp('gridProperties', newVal);\n  }\n\n  set hidden(newVal) {\n    return this._setProp('hidden', newVal);\n  }\n\n  set tabColor(newVal) {\n    return this._setProp('tabColor', newVal);\n  }\n\n  set rightToLeft(newVal) {\n    return this._setProp('rightToLeft', newVal);\n  }\n\n  get rowCount() {\n    this._ensureInfoLoaded();\n\n    return this.gridProperties.rowCount;\n  }\n\n  get columnCount() {\n    this._ensureInfoLoaded();\n\n    return this.gridProperties.columnCount;\n  }\n\n  get colCount() {\n    throw new Error('`colCount` is deprecated - please use `columnCount` instead.');\n  }\n\n  set rowCount(newVal) {\n    throw new Error('Do not update directly. Use resize()');\n  }\n\n  set columnCount(newVal) {\n    throw new Error('Do not update directly. Use resize()');\n  }\n\n  get a1SheetName() {\n    return `'${this.title.replace(/'/g, \"''\")}'`;\n  }\n\n  get encodedA1SheetName() {\n    return encodeURIComponent(this.a1SheetName);\n  }\n\n  get lastColumnLetter() {\n    return columnToLetter(this.columnCount);\n  } // CELLS-BASED INTERACTIONS //////////////////////////////////////////////////////////////////////\n\n\n  get cellStats() {\n    let allCells = _.flatten(this._cells);\n\n    allCells = _.compact(allCells);\n    return {\n      nonEmpty: _.filter(allCells, c => c.value).length,\n      loaded: allCells.length,\n      total: this.rowCount * this.columnCount\n    };\n  }\n\n  getCellByA1(a1Address) {\n    const split = a1Address.match(/([A-Z]+)([0-9]+)/);\n    const columnIndex = letterToColumn(split[1]);\n    const rowIndex = parseInt(split[2]);\n    return this.getCell(rowIndex - 1, columnIndex - 1);\n  }\n\n  getCell(rowIndex, columnIndex) {\n    if (rowIndex < 0 || columnIndex < 0) throw new Error('Min coordinate is 0, 0');\n\n    if (rowIndex >= this.rowCount || columnIndex >= this.columnCount) {\n      throw new Error(`Out of bounds, sheet is ${this.rowCount} by ${this.columnCount}`);\n    }\n\n    if (!_.get(this._cells, `[${rowIndex}][${columnIndex}]`)) {\n      throw new Error('This cell has not been loaded yet');\n    }\n\n    return this._cells[rowIndex][columnIndex];\n  }\n\n  async loadCells(sheetFilters) {\n    // load the whole sheet\n    if (!sheetFilters) return this._spreadsheet.loadCells(this.a1SheetName);\n    let filtersArray = _.isArray(sheetFilters) ? sheetFilters : [sheetFilters];\n    filtersArray = _.map(filtersArray, filter => {\n      // add sheet name to A1 ranges\n      if (_.isString(filter)) {\n        if (filter.startsWith(this.a1SheetName)) return filter;\n        return `${this.a1SheetName}!${filter}`;\n      }\n\n      if (_.isObject(filter)) {\n        // TODO: detect and support DeveloperMetadata filters\n        if (!filter.sheetId) {\n          return {\n            sheetId: this.sheetId,\n            ...filter\n          };\n        }\n\n        if (filter.sheetId !== this.sheetId) {\n          throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n        } else {\n          return filter;\n        }\n      } else {\n        throw new Error('Each filter must be a A1 range string or gridrange object');\n      }\n    });\n    return this._spreadsheet.loadCells(filtersArray);\n  }\n\n  async saveUpdatedCells() {\n    const cellsToSave = _.filter(_.flatten(this._cells), {\n      _isDirty: true\n    });\n\n    if (cellsToSave.length) {\n      await this.saveCells(cellsToSave);\n    } // TODO: do we want to return stats? or the cells that got updated?\n\n  }\n\n  async saveCells(cellsToUpdate) {\n    // we send an individual \"updateCells\" request for each cell\n    // because the fields that are udpated for each group are the same\n    // and we dont want to accidentally overwrite something\n    const requests = _.map(cellsToUpdate, cell => cell._getUpdateRequest());\n\n    const responseRanges = _.map(cellsToUpdate, c => `${this.a1SheetName}!${c.a1Address}`); // if nothing is being updated the request returned is just `null`\n    // so we make sure at least 1 request is valid - otherwise google throws a 400\n\n\n    if (!_.compact(requests).length) {\n      throw new Error('At least one cell must have something to update');\n    }\n\n    await this._spreadsheet._makeBatchUpdateRequest(requests, responseRanges);\n  } // SAVING THIS FOR FUTURE USE\n  // puts the cells that need updating into batches\n  // async updateCellsByBatches() {\n  //   // saving this code, but it's problematic because each group must have the same update fields\n  //   const cellsByRow = _.groupBy(cellsToUpdate, 'rowIndex');\n  //   const groupsToSave = [];\n  //   _.each(cellsByRow, (cells, rowIndex) => {\n  //     let cellGroup = [];\n  //     _.each(cells, (c) => {\n  //       if (!cellGroup.length) {\n  //         cellGroup.push(c);\n  //       } else if (\n  //         cellGroup[cellGroup.length - 1].columnIndex ===\n  //         c.columnIndex - 1\n  //       ) {\n  //         cellGroup.push(c);\n  //       } else {\n  //         groupsToSave.push(cellGroup);\n  //         cellGroup = [];\n  //       }\n  //     });\n  //     groupsToSave.push(cellGroup);\n  //   });\n  //   const requests = _.map(groupsToSave, (cellGroup) => ({\n  //     updateCells: {\n  //       rows: [\n  //         {\n  //           values: _.map(cellGroup, (cell) => ({\n  //             ...cell._draftData.value && {\n  //               userEnteredValue: { [cell._draftData.valueType]: cell._draftData.value },\n  //             },\n  //             ...cell._draftData.note !== undefined && {\n  //               note: cell._draftData.note ,\n  //             },\n  //             ...cell._draftData.userEnteredFormat && {\n  //               userEnteredValue: cell._draftData.userEnteredFormat,\n  //             },\n  //           })),\n  //         },\n  //       ],\n  //       fields: 'userEnteredValue,note,userEnteredFormat',\n  //       start: {\n  //         sheetId: this.sheetId,\n  //         rowIndex: cellGroup[0].rowIndex,\n  //         columnIndex: cellGroup[0].columnIndex,\n  //       },\n  //     },\n  //   }));\n  //   const responseRanges = _.map(groupsToSave, (cellGroup) => {\n  //     let a1Range = cellGroup[0].a1Address;\n  //     if (cellGroup.length > 1)\n  //       a1Range += `:${cellGroup[cellGroup.length - 1].a1Address}`;\n  //     return `${cellGroup[0]._sheet.a1SheetName}!${a1Range}`;\n  //   });\n  // }\n  // ROW BASED FUNCTIONS ///////////////////////////////////////////////////////////////////////////\n\n\n  async loadHeaderRow(headerRowIndex) {\n    if (headerRowIndex !== undefined) this._headerRowIndex = headerRowIndex;\n    const rows = await this.getCellsInRange(`A${this._headerRowIndex}:${this.lastColumnLetter}${this._headerRowIndex}`);\n\n    if (!rows) {\n      throw new Error('No values in the header row - fill the first row with header values before trying to interact with rows');\n    }\n\n    this.headerValues = _.map(rows[0], header => header.trim());\n\n    if (!_.compact(this.headerValues).length) {\n      throw new Error('All your header cells are blank - fill the first row with header values before trying to interact with rows');\n    }\n\n    checkForDuplicateHeaders(this.headerValues);\n  }\n\n  async setHeaderRow(headerValues, headerRowIndex) {\n    if (!headerValues) return;\n\n    if (headerValues.length > this.columnCount) {\n      throw new Error(`Sheet is not large enough to fit ${headerValues.length} columns. Resize the sheet first.`);\n    }\n\n    const trimmedHeaderValues = _.map(headerValues, h => h.trim());\n\n    checkForDuplicateHeaders(trimmedHeaderValues);\n\n    if (!_.compact(trimmedHeaderValues).length) {\n      throw new Error('All your header cells are blank -');\n    }\n\n    if (headerRowIndex) this._headerRowIndex = headerRowIndex;\n    const response = await this._spreadsheet.axios.request({\n      method: 'put',\n      url: `/values/${this.encodedA1SheetName}!${this._headerRowIndex}:${this._headerRowIndex}`,\n      params: {\n        valueInputOption: 'USER_ENTERED',\n        // other option is RAW\n        includeValuesInResponse: true\n      },\n      data: {\n        range: `${this.a1SheetName}!${this._headerRowIndex}:${this._headerRowIndex}`,\n        majorDimension: 'ROWS',\n        values: [[...trimmedHeaderValues, // pad the rest of the row with empty values to clear them all out\n        ..._.times(this.columnCount - trimmedHeaderValues.length, () => '')]]\n      }\n    });\n    this.headerValues = response.data.updatedData.values[0];\n  }\n\n  async addRows(rows) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // adds multiple rows in one API interaction using the append endpoint\n    // each row can be an array or object\n    // an array is just cells\n    // ex: ['column 1', 'column 2', 'column 3']\n    // an object must use the header row values as keys\n    // ex: { col1: 'column 1', col2: 'column 2', col3: 'column 3' }\n    // google bug that does not handle colons in names\n    // see https://issuetracker.google.com/issues/150373119\n    if (this.title.includes(':')) {\n      throw new Error('Please remove the \":\" from your sheet title. There is a bug with the google API which breaks appending rows if any colons are in the sheet title.');\n    }\n\n    if (!_.isArray(rows)) throw new Error('You must pass in an array of row values to append');\n    if (!this.headerValues) await this.loadHeaderRow(); // convert each row into an array of cell values rather than the key/value object\n\n    const rowsAsArrays = [];\n\n    _.each(rows, row => {\n      let rowAsArray;\n\n      if (_.isArray(row)) {\n        rowAsArray = row;\n      } else if (_.isObject(row)) {\n        rowAsArray = [];\n\n        for (let i = 0; i < this.headerValues.length; i++) {\n          const propName = this.headerValues[i];\n          rowAsArray[i] = row[propName];\n        }\n      } else {\n        throw new Error('Each row must be an object or an array');\n      }\n\n      rowsAsArrays.push(rowAsArray);\n    });\n\n    const response = await this._spreadsheet.axios.request({\n      method: 'post',\n      url: `/values/${this.encodedA1SheetName}!A${this._headerRowIndex}:append`,\n      params: {\n        valueInputOption: options.raw ? 'RAW' : 'USER_ENTERED',\n        insertDataOption: options.insert ? 'INSERT_ROWS' : 'OVERWRITE',\n        includeValuesInResponse: true\n      },\n      data: {\n        values: rowsAsArrays\n      }\n    }); // extract the new row number from the A1-notation data range in the response\n    // ex: in \"'Sheet8!A2:C2\" -- we want the `2`\n\n    const {\n      updatedRange\n    } = response.data.updates;\n    let rowNumber = updatedRange.match(/![A-Z]+([0-9]+):?/)[1];\n    rowNumber = parseInt(rowNumber); // if new rows were added, we need update sheet.rowRount\n\n    if (options.insert) {\n      this._rawProperties.gridProperties.rowCount += rows.length;\n    } else if (rowNumber + rows.length > this.rowCount) {\n      // have to subtract 1 since one row was inserted at rowNumber\n      this._rawProperties.gridProperties.rowCount = rowNumber + rows.length - 1;\n    }\n\n    return _.map(response.data.updates.updatedData.values, rowValues => {\n      const row = new GoogleSpreadsheetRow(this, rowNumber++, rowValues);\n      return row;\n    });\n  }\n\n  async addRow(rowValues, options) {\n    const rows = await this.addRows([rowValues], options);\n    return rows[0];\n  }\n\n  async getRows() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // https://developers.google.com/sheets/api/guides/migration\n    // v4 API does not have equivalents for the row-order query parameters provided\n    // Reverse-order is trivial; simply process the returned values array in reverse order.\n    // Order by column is not supported for reads, but it is possible to sort the data then read\n    // v4 API does not currently have a direct equivalent for the Sheets API v3 structured queries\n    // However, you can retrieve the relevant data and sort through it as needed in your application\n    // options\n    // - offset\n    // - limit\n    options.offset = options.offset || 0;\n    options.limit = options.limit || this.rowCount - 1;\n    if (!this.headerValues) await this.loadHeaderRow();\n    const firstRow = 1 + this._headerRowIndex + options.offset;\n    const lastRow = firstRow + options.limit - 1; // inclusive so we subtract 1\n\n    const lastColumn = columnToLetter(this.headerValues.length);\n    const rawRows = await this.getCellsInRange(`A${firstRow}:${lastColumn}${lastRow}`);\n    if (!rawRows) return [];\n    const rows = [];\n    let rowNum = firstRow;\n\n    for (let i = 0; i < rawRows.length; i++) {\n      rows.push(new GoogleSpreadsheetRow(this, rowNum++, rawRows[i]));\n    }\n\n    return rows;\n  } // BASIC PROPS ///////////////////////////////////////////////////////////////////////////////////\n\n\n  async updateProperties(properties) {\n    // Request type = `updateSheetProperties`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateSheetPropertiesRequest\n    // properties\n    // - title (string)\n    // - index (number)\n    // - gridProperties ({ object (GridProperties) } - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#gridproperties\n    // - hidden (boolean)\n    // - tabColor ({ object (Color) } - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/other#Color\n    // - rightToLeft (boolean)\n    return this._makeSingleUpdateRequest('updateSheetProperties', {\n      properties: {\n        sheetId: this.sheetId,\n        ...properties\n      },\n      fields: getFieldMask(properties)\n    });\n  }\n\n  async updateGridProperties(gridProperties) {\n    // just passes the call through to update gridProperties\n    // see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#GridProperties\n    // gridProperties\n    // - rowCount\n    // - columnCount\n    // - frozenRowCount\n    // - frozenColumnCount\n    // - hideGridLines\n    return this.updateProperties({\n      gridProperties\n    });\n  } // just a shortcut because resize makes more sense to change rowCount / columnCount\n\n\n  async resize(gridProperties) {\n    return this.updateGridProperties(gridProperties);\n  }\n\n  async updateDimensionProperties(columnsOrRows, properties, bounds) {\n    // Request type = `updateDimensionProperties`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#updatedimensionpropertiesrequest\n    // columnsOrRows = COLUMNS|ROWS\n    // properties\n    // - pixelSize\n    // - hiddenByUser\n    // - developerMetadata\n    // bounds\n    // - startIndex\n    // - endIndex\n    return this._makeSingleUpdateRequest('updateDimensionProperties', {\n      range: {\n        sheetId: this.sheetId,\n        dimension: columnsOrRows,\n        ...(bounds && {\n          startIndex: bounds.startIndex,\n          endIndex: bounds.endIndex\n        })\n      },\n      properties,\n      fields: getFieldMask(properties)\n    });\n  } // OTHER /////////////////////////////////////////////////////////////////////////////////////////\n  // this uses the \"values\" getter and does not give all the info about the cell contents\n  // it is used internally when loading header cells\n\n\n  async getCellsInRange(a1Range, options) {\n    const response = await this._spreadsheet.axios.get(`/values/${this.encodedA1SheetName}!${a1Range}`, {\n      params: options\n    });\n    return response.data.values;\n  }\n\n  async updateNamedRange() {// Request type = `updateNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateNamedRangeRequest\n  }\n\n  async addNamedRange() {// Request type = `addNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddNamedRangeRequest\n  }\n\n  async deleteNamedRange() {// Request type = `deleteNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteNamedRangeRequest\n  }\n\n  async repeatCell() {// Request type = `repeatCell`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#RepeatCellRequest\n  }\n\n  async autoFill() {// Request type = `autoFill`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AutoFillRequest\n  }\n\n  async cutPaste() {// Request type = `cutPaste`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CutPasteRequest\n  }\n\n  async copyPaste() {// Request type = `copyPaste`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CopyPasteRequest\n  }\n\n  async mergeCells(range) {\n    let mergeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MERGE_ALL';\n\n    // Request type = `mergeCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#MergeCellsRequest\n    if (range.sheetId && range.sheetId !== this.sheetId) {\n      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n    }\n\n    await this._makeSingleUpdateRequest('mergeCells', {\n      mergeType,\n      range: { ...range,\n        sheetId: this.sheetId\n      }\n    });\n  }\n\n  async unmergeCells(range) {\n    // Request type = `unmergeCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UnmergeCellsRequest\n    if (range.sheetId && range.sheetId !== this.sheetId) {\n      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n    }\n\n    await this._makeSingleUpdateRequest('unmergeCells', {\n      range: { ...range,\n        sheetId: this.sheetId\n      }\n    });\n  }\n\n  async updateBorders() {// Request type = `updateBorders`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateBordersRequest\n  }\n\n  async addFilterView() {// Request type = `addFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddFilterViewRequest\n  }\n\n  async appendCells() {// Request type = `appendCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AppendCellsRequest\n  }\n\n  async clearBasicFilter() {// Request type = `clearBasicFilter`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#ClearBasicFilterRequest\n  }\n\n  async deleteDimension() {// Request type = `deleteDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDimensionRequest\n  }\n\n  async deleteEmbeddedObject() {// Request type = `deleteEmbeddedObject`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteEmbeddedObjectRequest\n  }\n\n  async deleteFilterView() {// Request type = `deleteFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteFilterViewRequest\n  }\n\n  async duplicateFilterView() {// Request type = `duplicateFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DuplicateFilterViewRequest\n  }\n\n  async duplicateSheet() {// Request type = `duplicateSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DuplicateSheetRequest\n  }\n\n  async findReplace() {// Request type = `findReplace`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#FindReplaceRequest\n  }\n\n  async insertDimension(columnsOrRows, range) {\n    let inheritFromBefore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    // Request type = `insertDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#InsertDimensionRequest\n    if (!columnsOrRows) throw new Error('You need to specify a dimension. i.e. COLUMNS|ROWS');\n    if (!_.isObject(range)) throw new Error('`range` must be an object containing `startIndex` and `endIndex`');\n    if (!_.isInteger(range.startIndex) || range.startIndex < 0) throw new Error('range.startIndex must be an integer >=0');\n    if (!_.isInteger(range.endIndex) || range.endIndex < 0) throw new Error('range.endIndex must be an integer >=0');\n    if (range.endIndex <= range.startIndex) throw new Error('range.endIndex must be greater than range.startIndex'); // default inheritFromBefore to true - unless inserting in the first row/column\n\n    if (inheritFromBefore === null) {\n      inheritFromBefore = range.startIndex > 0;\n    } // do not allow inheritFromBefore if inserting at first row/column\n\n\n    if (inheritFromBefore && range.startIndex === 0) {\n      throw new Error('Cannot set inheritFromBefore to true if inserting in first row/column');\n    }\n\n    return this._makeSingleUpdateRequest('insertDimension', {\n      range: {\n        sheetId: this.sheetId,\n        dimension: columnsOrRows,\n        startIndex: range.startIndex,\n        endIndex: range.endIndex\n      },\n      inheritFromBefore\n    });\n  }\n\n  async insertRange() {// Request type = `insertRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#InsertRangeRequest\n  }\n\n  async moveDimension() {// Request type = `moveDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#MoveDimensionRequest\n  }\n\n  async updateEmbeddedObjectPosition() {// Request type = `updateEmbeddedObjectPosition`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateEmbeddedObjectPositionRequest\n  }\n\n  async pasteData() {// Request type = `pasteData`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#PasteDataRequest\n  }\n\n  async textToColumns() {// Request type = `textToColumns`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#TextToColumnsRequest\n  }\n\n  async updateFilterView() {// Request type = `updateFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateFilterViewRequest\n  }\n\n  async deleteRange() {// Request type = `deleteRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteRangeRequest\n  }\n\n  async appendDimension() {// Request type = `appendDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AppendDimensionRequest\n  }\n\n  async addConditionalFormatRule() {// Request type = `addConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddConditionalFormatRuleRequest\n  }\n\n  async updateConditionalFormatRule() {// Request type = `updateConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateConditionalFormatRuleRequest\n  }\n\n  async deleteConditionalFormatRule() {// Request type = `deleteConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteConditionalFormatRuleRequest\n  }\n\n  async sortRange() {// Request type = `sortRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SortRangeRequest\n  }\n\n  async setDataValidation() {// Request type = `setDataValidation`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SetDataValidationRequest\n  }\n\n  async setBasicFilter() {// Request type = `setBasicFilter`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SetBasicFilterRequest\n  }\n\n  async addProtectedRange() {// Request type = `addProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddProtectedRangeRequest\n  }\n\n  async updateProtectedRange() {// Request type = `updateProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateProtectedRangeRequest\n  }\n\n  async deleteProtectedRange() {// Request type = `deleteProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteProtectedRangeRequest\n  }\n\n  async autoResizeDimensions() {// Request type = `autoResizeDimensions`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AutoResizeDimensionsRequest\n  }\n\n  async addChart() {// Request type = `addChart`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddChartRequest\n  }\n\n  async updateChartSpec() {// Request type = `updateChartSpec`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateChartSpecRequest\n  }\n\n  async updateBanding() {// Request type = `updateBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateBandingRequest\n  }\n\n  async addBanding() {// Request type = `addBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddBandingRequest\n  }\n\n  async deleteBanding() {// Request type = `deleteBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteBandingRequest\n  }\n\n  async createDeveloperMetadata() {// Request type = `createDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CreateDeveloperMetadataRequest\n  }\n\n  async updateDeveloperMetadata() {// Request type = `updateDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateDeveloperMetadataRequest\n  }\n\n  async deleteDeveloperMetadata() {// Request type = `deleteDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDeveloperMetadataRequest\n  }\n\n  async randomizeRange() {// Request type = `randomizeRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#RandomizeRangeRequest\n  }\n\n  async addDimensionGroup() {// Request type = `addDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddDimensionGroupRequest\n  }\n\n  async deleteDimensionGroup() {// Request type = `deleteDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDimensionGroupRequest\n  }\n\n  async updateDimensionGroup() {// Request type = `updateDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateDimensionGroupRequest\n  }\n\n  async trimWhitespace() {// Request type = `trimWhitespace`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#TrimWhitespaceRequest\n  }\n\n  async deleteDuplicates() {// Request type = `deleteDuplicates`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDuplicatesRequest\n  }\n\n  async addSlicer() {// Request type = `addSlicer`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSlicerRequest\n  }\n\n  async updateSlicerSpec() {// Request type = `updateSlicerSpec`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateSlicerSpecRequest\n  } // delete this worksheet\n\n\n  async delete() {\n    return this._spreadsheet.deleteSheet(this.sheetId);\n  }\n\n  async del() {\n    return this.delete();\n  } // alias to mimic old interface\n  // copies this worksheet into another document/spreadsheet\n\n\n  async copyToSpreadsheet(destinationSpreadsheetId) {\n    return this._spreadsheet.axios.post(`/sheets/${this.sheetId}:copyTo`, {\n      destinationSpreadsheetId\n    });\n  }\n\n  async clear() {\n    // clears all the data in the sheet\n    // sheet name without ie 'sheet1' rather than 'sheet1'!A1:B5 is all cells\n    await this._spreadsheet.axios.post(`/values/${this.encodedA1SheetName}:clear`);\n    this.resetLocalCache(true);\n  }\n\n}\n\nmodule.exports = GoogleSpreadsheetWorksheet;","map":{"version":3,"sources":["/Users/justinzhao/Documents/GitHub/cloud_journal/node_modules/google-spreadsheet/lib/GoogleSpreadsheetWorksheet.js"],"names":["_","require","GoogleSpreadsheetRow","GoogleSpreadsheetCell","getFieldMask","columnToLetter","letterToColumn","checkForDuplicateHeaders","headers","checkForDupes","groupBy","each","grouped","header","length","Error","GoogleSpreadsheetWorksheet","constructor","parentSpreadsheet","properties","data","_spreadsheet","_headerRowIndex","_rawProperties","_cells","_rowMetadata","_columnMetadata","_fillCellData","_makeSingleUpdateRequest","requestType","requestParams","_ensureInfoLoaded","resetLocalCache","dataOnly","headerValues","dataRanges","range","startRow","startColumn","numRows","rowMetadata","numColumns","columnMetadata","i","actualRow","j","actualColumn","cellData","get","_updateRawData","_getProp","param","_setProp","newVal","sheetId","title","index","sheetType","gridProperties","hidden","tabColor","rightToLeft","rowCount","columnCount","colCount","a1SheetName","replace","encodedA1SheetName","encodeURIComponent","lastColumnLetter","cellStats","allCells","flatten","compact","nonEmpty","filter","c","value","loaded","total","getCellByA1","a1Address","split","match","columnIndex","rowIndex","parseInt","getCell","loadCells","sheetFilters","filtersArray","isArray","map","isString","startsWith","isObject","saveUpdatedCells","cellsToSave","_isDirty","saveCells","cellsToUpdate","requests","cell","_getUpdateRequest","responseRanges","_makeBatchUpdateRequest","loadHeaderRow","headerRowIndex","undefined","rows","getCellsInRange","trim","setHeaderRow","trimmedHeaderValues","h","response","axios","request","method","url","params","valueInputOption","includeValuesInResponse","majorDimension","values","times","updatedData","addRows","options","includes","rowsAsArrays","row","rowAsArray","propName","push","raw","insertDataOption","insert","updatedRange","updates","rowNumber","rowValues","addRow","getRows","offset","limit","firstRow","lastRow","lastColumn","rawRows","rowNum","updateProperties","fields","updateGridProperties","resize","updateDimensionProperties","columnsOrRows","bounds","dimension","startIndex","endIndex","a1Range","updateNamedRange","addNamedRange","deleteNamedRange","repeatCell","autoFill","cutPaste","copyPaste","mergeCells","mergeType","unmergeCells","updateBorders","addFilterView","appendCells","clearBasicFilter","deleteDimension","deleteEmbeddedObject","deleteFilterView","duplicateFilterView","duplicateSheet","findReplace","insertDimension","inheritFromBefore","isInteger","insertRange","moveDimension","updateEmbeddedObjectPosition","pasteData","textToColumns","updateFilterView","deleteRange","appendDimension","addConditionalFormatRule","updateConditionalFormatRule","deleteConditionalFormatRule","sortRange","setDataValidation","setBasicFilter","addProtectedRange","updateProtectedRange","deleteProtectedRange","autoResizeDimensions","addChart","updateChartSpec","updateBanding","addBanding","deleteBanding","createDeveloperMetadata","updateDeveloperMetadata","deleteDeveloperMetadata","randomizeRange","addDimensionGroup","deleteDimensionGroup","updateDimensionGroup","trimWhitespace","deleteDuplicates","addSlicer","updateSlicerSpec","delete","deleteSheet","del","copyToSpreadsheet","destinationSpreadsheetId","post","clear","module","exports"],"mappings":"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","sourcesContent":["const _ = require('lodash');\n\nconst GoogleSpreadsheetRow = require('./GoogleSpreadsheetRow');\nconst GoogleSpreadsheetCell = require('./GoogleSpreadsheetCell');\n\nconst { getFieldMask, columnToLetter, letterToColumn } = require('./utils');\n\nfunction checkForDuplicateHeaders(headers) {\n  // check for duplicate headers\n  const checkForDupes = _.groupBy(headers); // { c1: ['c1'], c2: ['c2', 'c2' ]}\n  _.each(checkForDupes, (grouped, header) => {\n    if (!header) return; // empty columns are skipped, so multiple is ok\n    if (grouped.length > 1) {\n      throw new Error(`Duplicate header detected: \"${header}\". Please make sure all non-empty headers are unique`);\n    }\n  });\n}\n\nclass GoogleSpreadsheetWorksheet {\n  constructor(parentSpreadsheet, { properties, data }) {\n    this._spreadsheet = parentSpreadsheet; // the parent GoogleSpreadsheet instance\n\n    this._headerRowIndex = 1; // assume \"header row\" (for row-based calls) is in first row\n\n    // basic properties\n    this._rawProperties = properties;\n\n    this._cells = []; // we will use a 2d sparse array to store cells;\n\n    this._rowMetadata = []; // 1d sparse array\n    this._columnMetadata = [];\n\n    if (data) this._fillCellData(data);\n\n    return this;\n  }\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    // pass the call up to the parent\n    return this._spreadsheet._makeSingleUpdateRequest(requestType, {\n      // sheetId: this.sheetId,\n      ...requestParams,\n    });\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) {\n      throw new Error('You must call `doc.loadInfo()` again before accessing this property');\n    }\n  }\n\n  resetLocalCache(dataOnly) {\n    if (!dataOnly) this._rawProperties = null;\n    this.headerValues = null;\n    this._headerRowIndex = 1;\n    this._cells = [];\n  }\n\n  _fillCellData(dataRanges) {\n    _.each(dataRanges, (range) => {\n      const startRow = range.startRow || 0;\n      const startColumn = range.startColumn || 0;\n      const numRows = range.rowMetadata.length;\n      const numColumns = range.columnMetadata.length;\n\n      // update cell data for entire range\n      for (let i = 0; i < numRows; i++) {\n        const actualRow = startRow + i;\n        for (let j = 0; j < numColumns; j++) {\n          const actualColumn = startColumn + j;\n\n          // if the row has not been initialized yet, do it\n          if (!this._cells[actualRow]) this._cells[actualRow] = [];\n\n          // see if the response includes some info for the cell\n          const cellData = _.get(range, `rowData[${i}].values[${j}]`);\n\n          // update the cell object or create it\n          if (this._cells[actualRow][actualColumn]) {\n            this._cells[actualRow][actualColumn]._updateRawData(cellData);\n          } else {\n            this._cells[actualRow][actualColumn] = new GoogleSpreadsheetCell(\n              this,\n              actualRow,\n              actualColumn,\n              cellData\n            );\n          }\n        }\n      }\n\n      // update row metadata\n      for (let i = 0; i < range.rowMetadata.length; i++) {\n        this._rowMetadata[startRow + i] = range.rowMetadata[i];\n      }\n      // update column metadata\n      for (let i = 0; i < range.columnMetadata.length; i++) {\n        this._columnMetadata[startColumn + i] = range.columnMetadata[i];\n      }\n    });\n  }\n\n\n  // PROPERTY GETTERS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) { // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get sheetId() { return this._getProp('sheetId'); }\n  get title() { return this._getProp('title'); }\n  get index() { return this._getProp('index'); }\n  get sheetType() { return this._getProp('sheetType'); }\n  get gridProperties() { return this._getProp('gridProperties'); }\n  get hidden() { return this._getProp('hidden'); }\n  get tabColor() { return this._getProp('tabColor'); }\n  get rightToLeft() { return this._getProp('rightToLeft'); }\n\n  set sheetId(newVal) { return this._setProp('sheetId', newVal); }\n  set title(newVal) { return this._setProp('title', newVal); }\n  set index(newVal) { return this._setProp('index', newVal); }\n  set sheetType(newVal) { return this._setProp('sheetType', newVal); }\n  set gridProperties(newVal) { return this._setProp('gridProperties', newVal); }\n  set hidden(newVal) { return this._setProp('hidden', newVal); }\n  set tabColor(newVal) { return this._setProp('tabColor', newVal); }\n  set rightToLeft(newVal) { return this._setProp('rightToLeft', newVal); }\n\n  get rowCount() {\n    this._ensureInfoLoaded();\n    return this.gridProperties.rowCount;\n  }\n  get columnCount() {\n    this._ensureInfoLoaded();\n    return this.gridProperties.columnCount;\n  }\n  get colCount() { throw new Error('`colCount` is deprecated - please use `columnCount` instead.'); }\n  set rowCount(newVal) { throw new Error('Do not update directly. Use resize()'); }\n  set columnCount(newVal) { throw new Error('Do not update directly. Use resize()'); }\n\n  get a1SheetName() { return `'${this.title.replace(/'/g, \"''\")}'`; }\n  get encodedA1SheetName() { return encodeURIComponent(this.a1SheetName); }\n  get lastColumnLetter() { return columnToLetter(this.columnCount); }\n\n\n  // CELLS-BASED INTERACTIONS //////////////////////////////////////////////////////////////////////\n\n  get cellStats() {\n    let allCells = _.flatten(this._cells);\n    allCells = _.compact(allCells);\n    return {\n      nonEmpty: _.filter(allCells, (c) => c.value).length,\n      loaded: allCells.length,\n      total: this.rowCount * this.columnCount,\n    };\n  }\n\n  getCellByA1(a1Address) {\n    const split = a1Address.match(/([A-Z]+)([0-9]+)/);\n    const columnIndex = letterToColumn(split[1]);\n    const rowIndex = parseInt(split[2]);\n    return this.getCell(rowIndex - 1, columnIndex - 1);\n  }\n\n  getCell(rowIndex, columnIndex) {\n    if (rowIndex < 0 || columnIndex < 0) throw new Error('Min coordinate is 0, 0');\n    if (rowIndex >= this.rowCount || columnIndex >= this.columnCount) {\n      throw new Error(`Out of bounds, sheet is ${this.rowCount} by ${this.columnCount}`);\n    }\n\n    if (!_.get(this._cells, `[${rowIndex}][${columnIndex}]`)) {\n      throw new Error('This cell has not been loaded yet');\n    }\n    return this._cells[rowIndex][columnIndex];\n  }\n\n  async loadCells(sheetFilters) {\n    // load the whole sheet\n    if (!sheetFilters) return this._spreadsheet.loadCells(this.a1SheetName);\n\n    let filtersArray = _.isArray(sheetFilters) ? sheetFilters : [sheetFilters];\n    filtersArray = _.map(filtersArray, (filter) => {\n      // add sheet name to A1 ranges\n      if (_.isString(filter)) {\n        if (filter.startsWith(this.a1SheetName)) return filter;\n        return `${this.a1SheetName}!${filter}`;\n      }\n      if (_.isObject(filter)) {\n        // TODO: detect and support DeveloperMetadata filters\n        if (!filter.sheetId) {\n          return { sheetId: this.sheetId, ...filter };\n        }\n        if (filter.sheetId !== this.sheetId) {\n          throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n        } else {\n          return filter;\n        }\n      } else {\n        throw new Error('Each filter must be a A1 range string or gridrange object');\n      }\n    });\n    return this._spreadsheet.loadCells(filtersArray);\n  }\n\n  async saveUpdatedCells() {\n    const cellsToSave = _.filter(_.flatten(this._cells), { _isDirty: true });\n    if (cellsToSave.length) {\n      await this.saveCells(cellsToSave);\n    }\n    // TODO: do we want to return stats? or the cells that got updated?\n  }\n\n  async saveCells(cellsToUpdate) {\n    // we send an individual \"updateCells\" request for each cell\n    // because the fields that are udpated for each group are the same\n    // and we dont want to accidentally overwrite something\n    const requests = _.map(cellsToUpdate, (cell) => cell._getUpdateRequest());\n    const responseRanges = _.map(cellsToUpdate, (c) => `${this.a1SheetName}!${c.a1Address}`);\n\n    // if nothing is being updated the request returned is just `null`\n    // so we make sure at least 1 request is valid - otherwise google throws a 400\n    if (!_.compact(requests).length) {\n      throw new Error('At least one cell must have something to update');\n    }\n\n    await this._spreadsheet._makeBatchUpdateRequest(requests, responseRanges);\n  }\n\n  // SAVING THIS FOR FUTURE USE\n  // puts the cells that need updating into batches\n  // async updateCellsByBatches() {\n  //   // saving this code, but it's problematic because each group must have the same update fields\n  //   const cellsByRow = _.groupBy(cellsToUpdate, 'rowIndex');\n  //   const groupsToSave = [];\n  //   _.each(cellsByRow, (cells, rowIndex) => {\n  //     let cellGroup = [];\n  //     _.each(cells, (c) => {\n  //       if (!cellGroup.length) {\n  //         cellGroup.push(c);\n  //       } else if (\n  //         cellGroup[cellGroup.length - 1].columnIndex ===\n  //         c.columnIndex - 1\n  //       ) {\n  //         cellGroup.push(c);\n  //       } else {\n  //         groupsToSave.push(cellGroup);\n  //         cellGroup = [];\n  //       }\n  //     });\n  //     groupsToSave.push(cellGroup);\n  //   });\n  //   const requests = _.map(groupsToSave, (cellGroup) => ({\n  //     updateCells: {\n  //       rows: [\n  //         {\n  //           values: _.map(cellGroup, (cell) => ({\n  //             ...cell._draftData.value && {\n  //               userEnteredValue: { [cell._draftData.valueType]: cell._draftData.value },\n  //             },\n  //             ...cell._draftData.note !== undefined && {\n  //               note: cell._draftData.note ,\n  //             },\n  //             ...cell._draftData.userEnteredFormat && {\n  //               userEnteredValue: cell._draftData.userEnteredFormat,\n  //             },\n  //           })),\n  //         },\n  //       ],\n  //       fields: 'userEnteredValue,note,userEnteredFormat',\n  //       start: {\n  //         sheetId: this.sheetId,\n  //         rowIndex: cellGroup[0].rowIndex,\n  //         columnIndex: cellGroup[0].columnIndex,\n  //       },\n  //     },\n  //   }));\n  //   const responseRanges = _.map(groupsToSave, (cellGroup) => {\n  //     let a1Range = cellGroup[0].a1Address;\n  //     if (cellGroup.length > 1)\n  //       a1Range += `:${cellGroup[cellGroup.length - 1].a1Address}`;\n  //     return `${cellGroup[0]._sheet.a1SheetName}!${a1Range}`;\n  //   });\n  // }\n\n  // ROW BASED FUNCTIONS ///////////////////////////////////////////////////////////////////////////\n\n  async loadHeaderRow(headerRowIndex) {\n    if (headerRowIndex !== undefined) this._headerRowIndex = headerRowIndex;\n    const rows = await this.getCellsInRange(`A${this._headerRowIndex}:${this.lastColumnLetter}${this._headerRowIndex}`);\n    if (!rows) {\n      throw new Error('No values in the header row - fill the first row with header values before trying to interact with rows');\n    }\n    this.headerValues = _.map(rows[0], (header) => header.trim());\n    if (!_.compact(this.headerValues).length) {\n      throw new Error('All your header cells are blank - fill the first row with header values before trying to interact with rows');\n    }\n    checkForDuplicateHeaders(this.headerValues);\n  }\n\n  async setHeaderRow(headerValues, headerRowIndex) {\n    if (!headerValues) return;\n    if (headerValues.length > this.columnCount) {\n      throw new Error(`Sheet is not large enough to fit ${headerValues.length} columns. Resize the sheet first.`);\n    }\n    const trimmedHeaderValues = _.map(headerValues, (h) => h.trim());\n    checkForDuplicateHeaders(trimmedHeaderValues);\n\n    if (!_.compact(trimmedHeaderValues).length) {\n      throw new Error('All your header cells are blank -');\n    }\n\n    if (headerRowIndex) this._headerRowIndex = headerRowIndex;\n\n    const response = await this._spreadsheet.axios.request({\n      method: 'put',\n      url: `/values/${this.encodedA1SheetName}!${this._headerRowIndex}:${this._headerRowIndex}`,\n      params: {\n        valueInputOption: 'USER_ENTERED', // other option is RAW\n        includeValuesInResponse: true,\n      },\n      data: {\n        range: `${this.a1SheetName}!${this._headerRowIndex}:${this._headerRowIndex}`,\n        majorDimension: 'ROWS',\n        values: [[\n          ...trimmedHeaderValues,\n          // pad the rest of the row with empty values to clear them all out\n          ..._.times(this.columnCount - trimmedHeaderValues.length, () => ''),\n        ]],\n      },\n    });\n    this.headerValues = response.data.updatedData.values[0];\n  }\n\n  async addRows(rows, options = {}) {\n    // adds multiple rows in one API interaction using the append endpoint\n\n    // each row can be an array or object\n    // an array is just cells\n    // ex: ['column 1', 'column 2', 'column 3']\n    // an object must use the header row values as keys\n    // ex: { col1: 'column 1', col2: 'column 2', col3: 'column 3' }\n\n    // google bug that does not handle colons in names\n    // see https://issuetracker.google.com/issues/150373119\n    if (this.title.includes(':')) {\n      throw new Error('Please remove the \":\" from your sheet title. There is a bug with the google API which breaks appending rows if any colons are in the sheet title.');\n    }\n\n    if (!_.isArray(rows)) throw new Error('You must pass in an array of row values to append');\n\n    if (!this.headerValues) await this.loadHeaderRow();\n\n    // convert each row into an array of cell values rather than the key/value object\n    const rowsAsArrays = [];\n    _.each(rows, (row) => {\n      let rowAsArray;\n      if (_.isArray(row)) {\n        rowAsArray = row;\n      } else if (_.isObject(row)) {\n        rowAsArray = [];\n        for (let i = 0; i < this.headerValues.length; i++) {\n          const propName = this.headerValues[i];\n          rowAsArray[i] = row[propName];\n        }\n      } else {\n        throw new Error('Each row must be an object or an array');\n      }\n      rowsAsArrays.push(rowAsArray);\n    });\n\n    const response = await this._spreadsheet.axios.request({\n      method: 'post',\n      url: `/values/${this.encodedA1SheetName}!A${this._headerRowIndex}:append`,\n      params: {\n        valueInputOption: options.raw ? 'RAW' : 'USER_ENTERED',\n        insertDataOption: options.insert ? 'INSERT_ROWS' : 'OVERWRITE',\n        includeValuesInResponse: true,\n      },\n      data: {\n        values: rowsAsArrays,\n      },\n    });\n\n    // extract the new row number from the A1-notation data range in the response\n    // ex: in \"'Sheet8!A2:C2\" -- we want the `2`\n    const { updatedRange } = response.data.updates;\n    let rowNumber = updatedRange.match(/![A-Z]+([0-9]+):?/)[1];\n    rowNumber = parseInt(rowNumber);\n\n    // if new rows were added, we need update sheet.rowRount\n    if (options.insert) {\n      this._rawProperties.gridProperties.rowCount += rows.length;\n    } else if (rowNumber + rows.length > this.rowCount) {\n      // have to subtract 1 since one row was inserted at rowNumber\n      this._rawProperties.gridProperties.rowCount = rowNumber + rows.length - 1;\n    }\n\n    return _.map(response.data.updates.updatedData.values, (rowValues) => {\n      const row = new GoogleSpreadsheetRow(this, rowNumber++, rowValues);\n      return row;\n    });\n  }\n\n  async addRow(rowValues, options) {\n    const rows = await this.addRows([rowValues], options);\n    return rows[0];\n  }\n\n  async getRows(options = {}) {\n    // https://developers.google.com/sheets/api/guides/migration\n    // v4 API does not have equivalents for the row-order query parameters provided\n    // Reverse-order is trivial; simply process the returned values array in reverse order.\n    // Order by column is not supported for reads, but it is possible to sort the data then read\n\n    // v4 API does not currently have a direct equivalent for the Sheets API v3 structured queries\n    // However, you can retrieve the relevant data and sort through it as needed in your application\n\n    // options\n    // - offset\n    // - limit\n\n    options.offset = options.offset || 0;\n    options.limit = options.limit || this.rowCount - 1;\n\n    if (!this.headerValues) await this.loadHeaderRow();\n\n    const firstRow = 1 + this._headerRowIndex + options.offset;\n    const lastRow = firstRow + options.limit - 1; // inclusive so we subtract 1\n    const lastColumn = columnToLetter(this.headerValues.length);\n    const rawRows = await this.getCellsInRange(\n      `A${firstRow}:${lastColumn}${lastRow}`\n    );\n\n    if (!rawRows) return [];\n\n    const rows = [];\n    let rowNum = firstRow;\n    for (let i = 0; i < rawRows.length; i++) {\n      rows.push(new GoogleSpreadsheetRow(this, rowNum++, rawRows[i]));\n    }\n    return rows;\n  }\n\n  // BASIC PROPS ///////////////////////////////////////////////////////////////////////////////////\n  async updateProperties(properties) {\n    // Request type = `updateSheetProperties`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateSheetPropertiesRequest\n\n    // properties\n    // - title (string)\n    // - index (number)\n    // - gridProperties ({ object (GridProperties) } - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#gridproperties\n    // - hidden (boolean)\n    // - tabColor ({ object (Color) } - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/other#Color\n    // - rightToLeft (boolean)\n\n    return this._makeSingleUpdateRequest('updateSheetProperties', {\n      properties: {\n        sheetId: this.sheetId,\n        ...properties,\n      },\n      fields: getFieldMask(properties),\n    });\n  }\n\n  async updateGridProperties(gridProperties) {\n    // just passes the call through to update gridProperties\n    // see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#GridProperties\n\n    // gridProperties\n    // - rowCount\n    // - columnCount\n    // - frozenRowCount\n    // - frozenColumnCount\n    // - hideGridLines\n    return this.updateProperties({ gridProperties });\n  }\n\n  // just a shortcut because resize makes more sense to change rowCount / columnCount\n  async resize(gridProperties) {\n    return this.updateGridProperties(gridProperties);\n  }\n\n  async updateDimensionProperties(columnsOrRows, properties, bounds) {\n    // Request type = `updateDimensionProperties`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#updatedimensionpropertiesrequest\n\n    // columnsOrRows = COLUMNS|ROWS\n    // properties\n    // - pixelSize\n    // - hiddenByUser\n    // - developerMetadata\n    // bounds\n    // - startIndex\n    // - endIndex\n\n    return this._makeSingleUpdateRequest('updateDimensionProperties', {\n      range: {\n        sheetId: this.sheetId,\n        dimension: columnsOrRows,\n        ...bounds && {\n          startIndex: bounds.startIndex,\n          endIndex: bounds.endIndex,\n        },\n      },\n      properties,\n      fields: getFieldMask(properties),\n    });\n  }\n\n  // OTHER /////////////////////////////////////////////////////////////////////////////////////////\n\n  // this uses the \"values\" getter and does not give all the info about the cell contents\n  // it is used internally when loading header cells\n  async getCellsInRange(a1Range, options) {\n    const response = await this._spreadsheet.axios.get(`/values/${this.encodedA1SheetName}!${a1Range}`, {\n      params: options,\n    });\n    return response.data.values;\n  }\n\n  async updateNamedRange() {\n    // Request type = `updateNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateNamedRangeRequest\n  }\n\n  async addNamedRange() {\n    // Request type = `addNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddNamedRangeRequest\n  }\n\n  async deleteNamedRange() {\n    // Request type = `deleteNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteNamedRangeRequest\n  }\n\n  async repeatCell() {\n    // Request type = `repeatCell`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#RepeatCellRequest\n  }\n\n  async autoFill() {\n    // Request type = `autoFill`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AutoFillRequest\n  }\n\n  async cutPaste() {\n    // Request type = `cutPaste`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CutPasteRequest\n  }\n\n  async copyPaste() {\n    // Request type = `copyPaste`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CopyPasteRequest\n  }\n\n  async mergeCells(range, mergeType = 'MERGE_ALL') {\n    // Request type = `mergeCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#MergeCellsRequest\n    if (range.sheetId && range.sheetId !== this.sheetId) {\n      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n    }\n    await this._makeSingleUpdateRequest('mergeCells', {\n      mergeType,\n      range: {\n        ...range,\n        sheetId: this.sheetId,\n      },\n    });\n  }\n\n  async unmergeCells(range) {\n    // Request type = `unmergeCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UnmergeCellsRequest\n    if (range.sheetId && range.sheetId !== this.sheetId) {\n      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n    }\n    await this._makeSingleUpdateRequest('unmergeCells', {\n      range: {\n        ...range,\n        sheetId: this.sheetId,\n      },\n    });\n  }\n\n  async updateBorders() {\n    // Request type = `updateBorders`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateBordersRequest\n  }\n\n  async addFilterView() {\n    // Request type = `addFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddFilterViewRequest\n  }\n\n  async appendCells() {\n    // Request type = `appendCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AppendCellsRequest\n  }\n\n  async clearBasicFilter() {\n    // Request type = `clearBasicFilter`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#ClearBasicFilterRequest\n  }\n\n  async deleteDimension() {\n    // Request type = `deleteDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDimensionRequest\n  }\n\n  async deleteEmbeddedObject() {\n    // Request type = `deleteEmbeddedObject`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteEmbeddedObjectRequest\n  }\n\n  async deleteFilterView() {\n    // Request type = `deleteFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteFilterViewRequest\n  }\n\n  async duplicateFilterView() {\n    // Request type = `duplicateFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DuplicateFilterViewRequest\n  }\n\n  async duplicateSheet() {\n    // Request type = `duplicateSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DuplicateSheetRequest\n  }\n\n  async findReplace() {\n    // Request type = `findReplace`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#FindReplaceRequest\n  }\n\n  async insertDimension(columnsOrRows, range, inheritFromBefore = null) {\n    // Request type = `insertDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#InsertDimensionRequest\n\n    if (!columnsOrRows) throw new Error('You need to specify a dimension. i.e. COLUMNS|ROWS');\n    if (!_.isObject(range)) throw new Error('`range` must be an object containing `startIndex` and `endIndex`');\n    if (!_.isInteger(range.startIndex) || range.startIndex < 0) throw new Error('range.startIndex must be an integer >=0');\n    if (!_.isInteger(range.endIndex) || range.endIndex < 0) throw new Error('range.endIndex must be an integer >=0');\n    if (range.endIndex <= range.startIndex) throw new Error('range.endIndex must be greater than range.startIndex');\n\n    // default inheritFromBefore to true - unless inserting in the first row/column\n    if (inheritFromBefore === null) {\n      inheritFromBefore = range.startIndex > 0;\n    }\n\n    // do not allow inheritFromBefore if inserting at first row/column\n    if (inheritFromBefore && range.startIndex === 0) {\n      throw new Error('Cannot set inheritFromBefore to true if inserting in first row/column');\n    }\n\n    return this._makeSingleUpdateRequest('insertDimension', {\n      range: {\n        sheetId: this.sheetId,\n        dimension: columnsOrRows,\n        startIndex: range.startIndex,\n        endIndex: range.endIndex,\n      },\n      inheritFromBefore,\n    });\n  }\n\n  async insertRange() {\n    // Request type = `insertRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#InsertRangeRequest\n  }\n\n  async moveDimension() {\n    // Request type = `moveDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#MoveDimensionRequest\n  }\n\n  async updateEmbeddedObjectPosition() {\n    // Request type = `updateEmbeddedObjectPosition`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateEmbeddedObjectPositionRequest\n  }\n\n  async pasteData() {\n    // Request type = `pasteData`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#PasteDataRequest\n  }\n\n  async textToColumns() {\n    // Request type = `textToColumns`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#TextToColumnsRequest\n  }\n\n  async updateFilterView() {\n    // Request type = `updateFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateFilterViewRequest\n  }\n\n  async deleteRange() {\n    // Request type = `deleteRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteRangeRequest\n  }\n\n  async appendDimension() {\n    // Request type = `appendDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AppendDimensionRequest\n  }\n\n  async addConditionalFormatRule() {\n    // Request type = `addConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddConditionalFormatRuleRequest\n  }\n\n  async updateConditionalFormatRule() {\n    // Request type = `updateConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateConditionalFormatRuleRequest\n  }\n\n  async deleteConditionalFormatRule() {\n    // Request type = `deleteConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteConditionalFormatRuleRequest\n  }\n\n  async sortRange() {\n    // Request type = `sortRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SortRangeRequest\n  }\n\n  async setDataValidation() {\n    // Request type = `setDataValidation`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SetDataValidationRequest\n  }\n\n  async setBasicFilter() {\n    // Request type = `setBasicFilter`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SetBasicFilterRequest\n  }\n\n  async addProtectedRange() {\n    // Request type = `addProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddProtectedRangeRequest\n  }\n\n  async updateProtectedRange() {\n    // Request type = `updateProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateProtectedRangeRequest\n  }\n\n  async deleteProtectedRange() {\n    // Request type = `deleteProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteProtectedRangeRequest\n  }\n\n  async autoResizeDimensions() {\n    // Request type = `autoResizeDimensions`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AutoResizeDimensionsRequest\n  }\n\n  async addChart() {\n    // Request type = `addChart`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddChartRequest\n  }\n\n  async updateChartSpec() {\n    // Request type = `updateChartSpec`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateChartSpecRequest\n  }\n\n  async updateBanding() {\n    // Request type = `updateBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateBandingRequest\n  }\n\n  async addBanding() {\n    // Request type = `addBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddBandingRequest\n  }\n\n  async deleteBanding() {\n    // Request type = `deleteBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteBandingRequest\n  }\n\n  async createDeveloperMetadata() {\n    // Request type = `createDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CreateDeveloperMetadataRequest\n  }\n\n  async updateDeveloperMetadata() {\n    // Request type = `updateDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateDeveloperMetadataRequest\n  }\n\n  async deleteDeveloperMetadata() {\n    // Request type = `deleteDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDeveloperMetadataRequest\n  }\n\n  async randomizeRange() {\n    // Request type = `randomizeRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#RandomizeRangeRequest\n  }\n\n  async addDimensionGroup() {\n    // Request type = `addDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddDimensionGroupRequest\n  }\n\n  async deleteDimensionGroup() {\n    // Request type = `deleteDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDimensionGroupRequest\n  }\n\n  async updateDimensionGroup() {\n    // Request type = `updateDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateDimensionGroupRequest\n  }\n\n  async trimWhitespace() {\n    // Request type = `trimWhitespace`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#TrimWhitespaceRequest\n  }\n\n  async deleteDuplicates() {\n    // Request type = `deleteDuplicates`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDuplicatesRequest\n  }\n\n  async addSlicer() {\n    // Request type = `addSlicer`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSlicerRequest\n  }\n\n  async updateSlicerSpec() {\n    // Request type = `updateSlicerSpec`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateSlicerSpecRequest\n  }\n\n  // delete this worksheet\n  async delete() {\n    return this._spreadsheet.deleteSheet(this.sheetId);\n  }\n  async del() { return this.delete(); } // alias to mimic old interface\n\n  // copies this worksheet into another document/spreadsheet\n  async copyToSpreadsheet(destinationSpreadsheetId) {\n    return this._spreadsheet.axios.post(`/sheets/${this.sheetId}:copyTo`, {\n      destinationSpreadsheetId,\n    });\n  }\n\n  async clear() {\n    // clears all the data in the sheet\n    // sheet name without ie 'sheet1' rather than 'sheet1'!A1:B5 is all cells\n    await this._spreadsheet.axios.post(`/values/${this.encodedA1SheetName}:clear`);\n    this.resetLocalCache(true);\n  }\n}\n\nmodule.exports = GoogleSpreadsheetWorksheet;\n"]},"metadata":{},"sourceType":"script"}