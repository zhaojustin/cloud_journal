{"ast":null,"code":"var _jsxFileName = \"/Users/justinzhao/Documents/GitHub/cloud_journal/src/components/Database/BobaTracker/LastUpdatedCost.js\";\nimport React from \"react\";\nimport Airtable from \"airtable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst BASE_ID = \"app27OZGEFr5eKnk4\";\n\nclass LastUpdatedCost extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      cost: \"Loading...\"\n    };\n  }\n\n  async componentDidMount() {\n    var base = new Airtable({\n      apiKey: API_KEY\n    }).base(BASE_ID);\n    base(\"Boba Tracker\").select({\n      // Selecting the first 3 records in Grid view:\n      pageSize: 2,\n      view: \"Grid view\"\n    }).eachPage(function page(records, fetchNextPage) {\n      // This function (`page`) will get called for each page of records.\n      console.log(\"new page\");\n      records.forEach(function (record) {\n        console.log(\"Retrieved\", record.get(\"store\"));\n      }); // To fetch the next page of records, call `fetchNextPage`.\n      // If there are more records, `page` will get called again.\n      // If there are no more records, `done` will get called.\n\n      fetchNextPage();\n    }, function done(err) {\n      console.log(\"done looping through table\");\n\n      if (err) {\n        console.error(err);\n        return;\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: this.state.cost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default LastUpdatedCost;","map":{"version":3,"sources":["/Users/justinzhao/Documents/GitHub/cloud_journal/src/components/Database/BobaTracker/LastUpdatedCost.js"],"names":["React","Airtable","API_KEY","process","env","REACT_APP_API_KEY","BASE_ID","LastUpdatedCost","Component","constructor","state","cost","componentDidMount","base","apiKey","select","pageSize","view","eachPage","page","records","fetchNextPage","console","log","forEach","record","get","done","err","error","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;AACA,MAAMC,OAAO,GAAG,mBAAhB;;AAEA,MAAMC,eAAN,SAA8BP,KAAK,CAACQ,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AAEsB,QAAjBC,iBAAiB,GAAG;AACxB,QAAIC,IAAI,GAAG,IAAIZ,QAAJ,CAAa;AAAEa,MAAAA,MAAM,EAAEZ;AAAV,KAAb,EAAkCW,IAAlC,CAAuCP,OAAvC,CAAX;AAEAO,IAAAA,IAAI,CAAC,cAAD,CAAJ,CACGE,MADH,CACU;AACN;AACAC,MAAAA,QAAQ,EAAE,CAFJ;AAGNC,MAAAA,IAAI,EAAE;AAHA,KADV,EAMGC,QANH,CAOI,SAASC,IAAT,CAAcC,OAAd,EAAuBC,aAAvB,EAAsC;AACpC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAH,MAAAA,OAAO,CAACI,OAAR,CAAgB,UAAUC,MAAV,EAAkB;AAChCH,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBE,MAAM,CAACC,GAAP,CAAW,OAAX,CAAzB;AACD,OAFD,EAHoC,CAOpC;AACA;AACA;;AACAL,MAAAA,aAAa;AACd,KAlBL,EAmBI,SAASM,IAAT,CAAcC,GAAd,EAAmB;AACjBN,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;;AACA,UAAIK,GAAJ,EAAS;AACPN,QAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACA;AACD;AACF,KAzBL;AA2BD;;AAEDE,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA,gBAAO,KAAKpB,KAAL,CAAWC;AAAlB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA3C2C;;AA8C9C,eAAeJ,eAAf","sourcesContent":["import React from \"react\";\nimport Airtable from \"airtable\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst BASE_ID = \"app27OZGEFr5eKnk4\";\n\nclass LastUpdatedCost extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      cost: \"Loading...\",\n    };\n  }\n\n  async componentDidMount() {\n    var base = new Airtable({ apiKey: API_KEY }).base(BASE_ID);\n\n    base(\"Boba Tracker\")\n      .select({\n        // Selecting the first 3 records in Grid view:\n        pageSize: 2,\n        view: \"Grid view\",\n      })\n      .eachPage(\n        function page(records, fetchNextPage) {\n          // This function (`page`) will get called for each page of records.\n          console.log(\"new page\");\n          records.forEach(function (record) {\n            console.log(\"Retrieved\", record.get(\"store\"));\n          });\n\n          // To fetch the next page of records, call `fetchNextPage`.\n          // If there are more records, `page` will get called again.\n          // If there are no more records, `done` will get called.\n          fetchNextPage();\n        },\n        function done(err) {\n          console.log(\"done looping through table\");\n          if (err) {\n            console.error(err);\n            return;\n          }\n        }\n      );\n  }\n\n  render() {\n    return <span>{this.state.cost}</span>;\n  }\n}\n\nexport default LastUpdatedCost;\n"]},"metadata":{},"sourceType":"module"}