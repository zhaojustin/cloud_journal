{"ast":null,"code":"var _jsxFileName = \"/Users/justinzhao/Documents/GitHub/cloud_journal/src/components/Database/BobaTracker/LastUpdatedCost.js\";\nimport React from \"react\";\nimport Airtable from \"airtable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst BASE_ID = \"app27OZGEFr5eKnk4\";\n\nclass LastUpdatedCost extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      cost: \"Loading...\"\n    };\n  }\n\n  async componentDidMount() {\n    var done = false;\n    var cost_temp = 0;\n    var base = new Airtable({\n      apiKey: API_KEY\n    }).base(BASE_ID);\n    base(\"Boba Tracker\").select({\n      view: \"Grid view\"\n    }).eachPage(function page(records, fetchNextPage) {\n      // This function (`page`) will get called for each page of records.\n      records.forEach(function (record) {\n        cost_temp += record.get(\"price\");\n      }); // To fetch the next page of records, call `fetchNextPage`.\n      // If there are more records, `page` will get called again.\n      // If there are no more records, `done` will get called.\n\n      fetchNextPage();\n    }, function done(err) {\n      console.log(\"total cost is \" + cost_temp);\n      done = true;\n\n      if (err) {\n        console.error(err);\n        return;\n      }\n    });\n\n    (async () => {\n      console.log(\"Getting total boba cost...\");\n\n      while (!done) // define the condition as you like\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      console.log(\"total cost is \" + cost_temp);\n      this.setState({\n        cost: cost_temp\n      });\n    })();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: this.state.cost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default LastUpdatedCost;","map":{"version":3,"sources":["/Users/justinzhao/Documents/GitHub/cloud_journal/src/components/Database/BobaTracker/LastUpdatedCost.js"],"names":["React","Airtable","API_KEY","process","env","REACT_APP_API_KEY","BASE_ID","LastUpdatedCost","Component","constructor","state","cost","componentDidMount","done","cost_temp","base","apiKey","select","view","eachPage","page","records","fetchNextPage","forEach","record","get","err","console","log","error","Promise","resolve","setTimeout","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;AACA,MAAMC,OAAO,GAAG,mBAAhB;;AAEA,MAAMC,eAAN,SAA8BP,KAAK,CAACQ,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AAEsB,QAAjBC,iBAAiB,GAAG;AACxB,QAAIC,IAAI,GAAG,KAAX;AACA,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAIC,IAAI,GAAG,IAAId,QAAJ,CAAa;AAAEe,MAAAA,MAAM,EAAEd;AAAV,KAAb,EAAkCa,IAAlC,CAAuCT,OAAvC,CAAX;AAEAS,IAAAA,IAAI,CAAC,cAAD,CAAJ,CACGE,MADH,CACU;AACNC,MAAAA,IAAI,EAAE;AADA,KADV,EAIGC,QAJH,CAKI,SAASC,IAAT,CAAcC,OAAd,EAAuBC,aAAvB,EAAsC;AACpC;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgB,UAAUC,MAAV,EAAkB;AAChCV,QAAAA,SAAS,IAAIU,MAAM,CAACC,GAAP,CAAW,OAAX,CAAb;AACD,OAFD,EAFoC,CAMpC;AACA;AACA;;AACAH,MAAAA,aAAa;AACd,KAfL,EAgBI,SAAST,IAAT,CAAca,GAAd,EAAmB;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBd,SAA/B;AACAD,MAAAA,IAAI,GAAG,IAAP;;AAEA,UAAIa,GAAJ,EAAS;AACPC,QAAAA,OAAO,CAACE,KAAR,CAAcH,GAAd;AACA;AACD;AACF,KAxBL;;AA2BA,KAAC,YAAY;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;;AACA,aAAO,CAACf,IAAR,EACE;AACA,YAAM,IAAIiB,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,GAAV,CAAnC,CAAN;;AACFJ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBd,SAA/B;AACA,WAAKmB,QAAL,CAAc;AACZtB,QAAAA,IAAI,EAAEG;AADM,OAAd;AAGD,KATD;AAUD;;AAEDoB,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA,gBAAO,KAAKxB,KAAL,CAAWC;AAAlB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAvD2C;;AA0D9C,eAAeJ,eAAf","sourcesContent":["import React from \"react\";\nimport Airtable from \"airtable\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst BASE_ID = \"app27OZGEFr5eKnk4\";\n\nclass LastUpdatedCost extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      cost: \"Loading...\",\n    };\n  }\n\n  async componentDidMount() {\n    var done = false;\n    var cost_temp = 0;\n    var base = new Airtable({ apiKey: API_KEY }).base(BASE_ID);\n\n    base(\"Boba Tracker\")\n      .select({\n        view: \"Grid view\",\n      })\n      .eachPage(\n        function page(records, fetchNextPage) {\n          // This function (`page`) will get called for each page of records.\n          records.forEach(function (record) {\n            cost_temp += record.get(\"price\");\n          });\n\n          // To fetch the next page of records, call `fetchNextPage`.\n          // If there are more records, `page` will get called again.\n          // If there are no more records, `done` will get called.\n          fetchNextPage();\n        },\n        function done(err) {\n          console.log(\"total cost is \" + cost_temp);\n          done = true;\n\n          if (err) {\n            console.error(err);\n            return;\n          }\n        }\n      );\n\n    (async () => {\n      console.log(\"Getting total boba cost...\");\n      while (!done)\n        // define the condition as you like\n        await new Promise((resolve) => setTimeout(resolve, 500));\n      console.log(\"total cost is \" + cost_temp);\n      this.setState({\n        cost: cost_temp,\n      });\n    })();\n  }\n\n  render() {\n    return <span>{this.state.cost}</span>;\n  }\n}\n\nexport default LastUpdatedCost;\n"]},"metadata":{},"sourceType":"module"}