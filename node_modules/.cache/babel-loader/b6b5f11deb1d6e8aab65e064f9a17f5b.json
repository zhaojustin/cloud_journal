{"ast":null,"code":"var _jsxFileName = \"/Users/justinzhao/Documents/GitHub/cloud_journal/src/components/Database/BobaTracker/LastUpdatedCost.js\";\nimport React from \"react\";\nimport Airtable from \"airtable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst BASE_ID = \"app27OZGEFr5eKnk4\";\n\nclass LastUpdatedCost extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      cost: \"Loading...\"\n    };\n  }\n\n  async componentDidMount() {\n    var cost_temp = 0;\n    var done = false;\n    var base = new Airtable({\n      apiKey: API_KEY\n    }).base(BASE_ID);\n    base(\"Boba Tracker\").select({\n      pageSize: 100,\n      view: \"Grid view\"\n    }).eachPage(function page(records, next) {\n      try {\n        records.forEach(function (record) {\n          cost_temp += record.get(\"price\");\n          console.log(cost_temp);\n        });\n        next();\n      } catch {\n        return;\n      }\n    }, function (err) {\n      this.setState({\n        cost: cost_temp\n      });\n\n      if (err) {\n        console.error(err);\n        return;\n      }\n    });\n\n    (async () => {\n      console.log(\"Getting total boba cost...\");\n\n      while (!done) // define the condition as you like\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      console.log(\"Total boba cost is \" + cost_temp);\n      this.setState({\n        date: lastUpdatedDate\n      });\n    })();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: this.state.cost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default LastUpdatedCost;","map":{"version":3,"sources":["/Users/justinzhao/Documents/GitHub/cloud_journal/src/components/Database/BobaTracker/LastUpdatedCost.js"],"names":["React","Airtable","API_KEY","process","env","REACT_APP_API_KEY","BASE_ID","LastUpdatedCost","Component","constructor","state","cost","componentDidMount","cost_temp","done","base","apiKey","select","pageSize","view","eachPage","page","records","next","forEach","record","get","console","log","err","setState","error","Promise","resolve","setTimeout","date","lastUpdatedDate","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;AACA,MAAMC,OAAO,GAAG,mBAAhB;;AAEA,MAAMC,eAAN,SAA8BP,KAAK,CAACQ,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,GAAG;AACZ;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AAEsB,QAAjBC,iBAAiB,GAAG;AACxB,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAIC,IAAI,GAAG,KAAX;AACA,QAAIC,IAAI,GAAG,IAAId,QAAJ,CAAa;AAAEe,MAAAA,MAAM,EAAEd;AAAV,KAAb,EAAkCa,IAAlC,CAAuCT,OAAvC,CAAX;AAEAS,IAAAA,IAAI,CAAC,cAAD,CAAJ,CACGE,MADH,CACU;AACNC,MAAAA,QAAQ,EAAE,GADJ;AAENC,MAAAA,IAAI,EAAE;AAFA,KADV,EAKGC,QALH,CAMI,SAASC,IAAT,CAAcC,OAAd,EAAuBC,IAAvB,EAA6B;AAC3B,UAAI;AACFD,QAAAA,OAAO,CAACE,OAAR,CAAgB,UAAUC,MAAV,EAAkB;AAChCZ,UAAAA,SAAS,IAAIY,MAAM,CAACC,GAAP,CAAW,OAAX,CAAb;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYf,SAAZ;AACD,SAHD;AAKAU,QAAAA,IAAI;AACL,OAPD,CAOE,MAAM;AACN;AACD;AACF,KAjBL,EAkBI,UAAUM,GAAV,EAAe;AACb,WAAKC,QAAL,CAAc;AACZnB,QAAAA,IAAI,EAAEE;AADM,OAAd;;AAIA,UAAIgB,GAAJ,EAAS;AACPF,QAAAA,OAAO,CAACI,KAAR,CAAcF,GAAd;AACA;AACD;AACF,KA3BL;;AA8BA,KAAC,YAAY;AACXF,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;;AACA,aAAO,CAACd,IAAR,EACE;AACA,YAAM,IAAIkB,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,GAAV,CAAnC,CAAN;;AACFN,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBf,SAApC;AACA,WAAKiB,QAAL,CAAc;AACZK,QAAAA,IAAI,EAAEC;AADM,OAAd;AAGD,KATD;AAUD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA,gBAAO,KAAK3B,KAAL,CAAWC;AAAlB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AA1D2C;;AA6D9C,eAAeJ,eAAf","sourcesContent":["import React from \"react\";\nimport Airtable from \"airtable\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst BASE_ID = \"app27OZGEFr5eKnk4\";\n\nclass LastUpdatedCost extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      cost: \"Loading...\",\n    };\n  }\n\n  async componentDidMount() {\n    var cost_temp = 0;\n    var done = false;\n    var base = new Airtable({ apiKey: API_KEY }).base(BASE_ID);\n\n    base(\"Boba Tracker\")\n      .select({\n        pageSize: 100,\n        view: \"Grid view\",\n      })\n      .eachPage(\n        function page(records, next) {\n          try {\n            records.forEach(function (record) {\n              cost_temp += record.get(\"price\");\n              console.log(cost_temp);\n            });\n\n            next();\n          } catch {\n            return;\n          }\n        },\n        function (err) {\n          this.setState({\n            cost: cost_temp,\n          });\n\n          if (err) {\n            console.error(err);\n            return;\n          }\n        }\n      );\n\n    (async () => {\n      console.log(\"Getting total boba cost...\");\n      while (!done)\n        // define the condition as you like\n        await new Promise((resolve) => setTimeout(resolve, 500));\n      console.log(\"Total boba cost is \" + cost_temp);\n      this.setState({\n        date: lastUpdatedDate,\n      });\n    })();\n  }\n\n  render() {\n    return <span>{this.state.cost}</span>;\n  }\n}\n\nexport default LastUpdatedCost;\n"]},"metadata":{},"sourceType":"module"}