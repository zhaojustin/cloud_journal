{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar isPlainObject_1 = __importDefault(require(\"lodash/isPlainObject\"));\n\nvar deprecate_1 = __importDefault(require(\"./deprecate\"));\n\nvar query_1 = __importDefault(require(\"./query\"));\n\nvar record_1 = __importDefault(require(\"./record\"));\n\nvar callback_to_promise_1 = __importDefault(require(\"./callback_to_promise\"));\n\nvar Table =\n/** @class */\nfunction () {\n  function Table(base, tableId, tableName) {\n    if (!tableId && !tableName) {\n      throw new Error('Table name or table ID is required');\n    }\n\n    this._base = base;\n    this.id = tableId;\n    this.name = tableName; // Public API\n\n    this.find = callback_to_promise_1.default(this._findRecordById, this);\n    this.select = this._selectRecords.bind(this);\n    this.create = callback_to_promise_1.default(this._createRecords, this);\n    this.update = callback_to_promise_1.default(this._updateRecords.bind(this, false), this);\n    this.replace = callback_to_promise_1.default(this._updateRecords.bind(this, true), this);\n    this.destroy = callback_to_promise_1.default(this._destroyRecord, this); // Deprecated API\n\n    this.list = deprecate_1.default(this._listRecords.bind(this), 'table.list', 'Airtable: `list()` is deprecated. Use `select()` instead.');\n    this.forEach = deprecate_1.default(this._forEachRecord.bind(this), 'table.forEach', 'Airtable: `forEach()` is deprecated. Use `select()` instead.');\n  }\n\n  Table.prototype._findRecordById = function (recordId, done) {\n    var record = new record_1.default(this, recordId);\n    record.fetch(done);\n  };\n\n  Table.prototype._selectRecords = function (params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (arguments.length > 1) {\n      console.warn(\"Airtable: `select` takes only one parameter, but it was given \" + arguments.length + \" parameters. Use `eachPage` or `firstPage` to fetch records.\");\n    }\n\n    if (isPlainObject_1.default(params)) {\n      var validationResults = query_1.default.validateParams(params);\n\n      if (validationResults.errors.length) {\n        var formattedErrors = validationResults.errors.map(function (error) {\n          return \"  * \" + error;\n        });\n        throw new Error(\"Airtable: invalid parameters for `select`:\\n\" + formattedErrors.join('\\n'));\n      }\n\n      if (validationResults.ignoredKeys.length) {\n        console.warn(\"Airtable: the following parameters to `select` will be ignored: \" + validationResults.ignoredKeys.join(', '));\n      }\n\n      return new query_1.default(this, validationResults.validParams);\n    } else {\n      throw new Error('Airtable: the parameter for `select` should be a plain object or undefined.');\n    }\n  };\n\n  Table.prototype._urlEncodedNameOrId = function () {\n    return this.id || encodeURIComponent(this.name);\n  };\n\n  Table.prototype._createRecords = function (recordsData, optionalParameters, done) {\n    var _this = this;\n\n    var isCreatingMultipleRecords = Array.isArray(recordsData);\n\n    if (!done) {\n      done = optionalParameters;\n      optionalParameters = {};\n    }\n\n    var requestData;\n\n    if (isCreatingMultipleRecords) {\n      requestData = __assign({\n        records: recordsData\n      }, optionalParameters);\n    } else {\n      requestData = __assign({\n        fields: recordsData\n      }, optionalParameters);\n    }\n\n    this._base.runAction('post', \"/\" + this._urlEncodedNameOrId() + \"/\", {}, requestData, function (err, resp, body) {\n      if (err) {\n        done(err);\n        return;\n      }\n\n      var result;\n\n      if (isCreatingMultipleRecords) {\n        result = body.records.map(function (record) {\n          return new record_1.default(_this, record.id, record);\n        });\n      } else {\n        result = new record_1.default(_this, body.id, body);\n      }\n\n      done(null, result);\n    });\n  };\n\n  Table.prototype._updateRecords = function (isDestructiveUpdate, recordsDataOrRecordId, recordDataOrOptsOrDone, optsOrDone, done) {\n    var _this = this;\n\n    var opts;\n\n    if (Array.isArray(recordsDataOrRecordId)) {\n      var recordsData = recordsDataOrRecordId;\n      opts = isPlainObject_1.default(recordDataOrOptsOrDone) ? recordDataOrOptsOrDone : {};\n      done = optsOrDone || recordDataOrOptsOrDone;\n      var method = isDestructiveUpdate ? 'put' : 'patch';\n\n      var requestData = __assign({\n        records: recordsData\n      }, opts);\n\n      this._base.runAction(method, \"/\" + this._urlEncodedNameOrId() + \"/\", {}, requestData, function (err, resp, body) {\n        if (err) {\n          done(err);\n          return;\n        }\n\n        var result = body.records.map(function (record) {\n          return new record_1.default(_this, record.id, record);\n        });\n        done(null, result);\n      });\n    } else {\n      var recordId = recordsDataOrRecordId;\n      var recordData = recordDataOrOptsOrDone;\n      opts = isPlainObject_1.default(optsOrDone) ? optsOrDone : {};\n      done = done || optsOrDone;\n      var record = new record_1.default(this, recordId);\n\n      if (isDestructiveUpdate) {\n        record.putUpdate(recordData, opts, done);\n      } else {\n        record.patchUpdate(recordData, opts, done);\n      }\n    }\n  };\n\n  Table.prototype._destroyRecord = function (recordIdsOrId, done) {\n    var _this = this;\n\n    if (Array.isArray(recordIdsOrId)) {\n      var queryParams = {\n        records: recordIdsOrId\n      };\n\n      this._base.runAction('delete', \"/\" + this._urlEncodedNameOrId(), queryParams, null, function (err, response, results) {\n        if (err) {\n          done(err);\n          return;\n        }\n\n        var records = results.records.map(function (_a) {\n          var id = _a.id;\n          return new record_1.default(_this, id, null);\n        });\n        done(null, records);\n      });\n    } else {\n      var record = new record_1.default(this, recordIdsOrId);\n      record.destroy(done);\n    }\n  };\n\n  Table.prototype._listRecords = function (limit, offset, opts, done) {\n    var _this = this;\n\n    if (!done) {\n      done = opts;\n      opts = {};\n    }\n\n    var listRecordsParameters = __assign({\n      limit: limit,\n      offset: offset\n    }, opts);\n\n    this._base.runAction('get', \"/\" + this._urlEncodedNameOrId() + \"/\", listRecordsParameters, null, function (err, response, results) {\n      if (err) {\n        done(err);\n        return;\n      }\n\n      var records = results.records.map(function (recordJson) {\n        return new record_1.default(_this, null, recordJson);\n      });\n      done(null, records, results.offset);\n    });\n  };\n\n  Table.prototype._forEachRecord = function (opts, callback, done) {\n    var _this = this;\n\n    if (arguments.length === 2) {\n      done = callback;\n      callback = opts;\n      opts = {};\n    }\n\n    var limit = Table.__recordsPerPageForIteration || 100;\n    var offset = null;\n\n    var nextPage = function () {\n      _this._listRecords(limit, offset, opts, function (err, page, newOffset) {\n        if (err) {\n          done(err);\n          return;\n        }\n\n        for (var index = 0; index < page.length; index++) {\n          callback(page[index]);\n        }\n\n        if (newOffset) {\n          offset = newOffset;\n          nextPage();\n        } else {\n          done();\n        }\n      });\n    };\n\n    nextPage();\n  };\n\n  return Table;\n}();\n\nmodule.exports = Table;","map":{"version":3,"sources":["../src/table.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar isPlainObject_1 = __importDefault(require(\"lodash/isPlainObject\"));\nvar deprecate_1 = __importDefault(require(\"./deprecate\"));\nvar query_1 = __importDefault(require(\"./query\"));\nvar record_1 = __importDefault(require(\"./record\"));\nvar callback_to_promise_1 = __importDefault(require(\"./callback_to_promise\"));\nvar Table = /** @class */ (function () {\n    function Table(base, tableId, tableName) {\n        if (!tableId && !tableName) {\n            throw new Error('Table name or table ID is required');\n        }\n        this._base = base;\n        this.id = tableId;\n        this.name = tableName;\n        // Public API\n        this.find = callback_to_promise_1.default(this._findRecordById, this);\n        this.select = this._selectRecords.bind(this);\n        this.create = callback_to_promise_1.default(this._createRecords, this);\n        this.update = callback_to_promise_1.default(this._updateRecords.bind(this, false), this);\n        this.replace = callback_to_promise_1.default(this._updateRecords.bind(this, true), this);\n        this.destroy = callback_to_promise_1.default(this._destroyRecord, this);\n        // Deprecated API\n        this.list = deprecate_1.default(this._listRecords.bind(this), 'table.list', 'Airtable: `list()` is deprecated. Use `select()` instead.');\n        this.forEach = deprecate_1.default(this._forEachRecord.bind(this), 'table.forEach', 'Airtable: `forEach()` is deprecated. Use `select()` instead.');\n    }\n    Table.prototype._findRecordById = function (recordId, done) {\n        var record = new record_1.default(this, recordId);\n        record.fetch(done);\n    };\n    Table.prototype._selectRecords = function (params) {\n        if (params === void 0) {\n            params = {};\n        }\n        if (arguments.length > 1) {\n            console.warn(\"Airtable: `select` takes only one parameter, but it was given \" + arguments.length + \" parameters. Use `eachPage` or `firstPage` to fetch records.\");\n        }\n        if (isPlainObject_1.default(params)) {\n            var validationResults = query_1.default.validateParams(params);\n            if (validationResults.errors.length) {\n                var formattedErrors = validationResults.errors.map(function (error) {\n                    return \"  * \" + error;\n                });\n                throw new Error(\"Airtable: invalid parameters for `select`:\\n\" + formattedErrors.join('\\n'));\n            }\n            if (validationResults.ignoredKeys.length) {\n                console.warn(\"Airtable: the following parameters to `select` will be ignored: \" + validationResults.ignoredKeys.join(', '));\n            }\n            return new query_1.default(this, validationResults.validParams);\n        }\n        else {\n            throw new Error('Airtable: the parameter for `select` should be a plain object or undefined.');\n        }\n    };\n    Table.prototype._urlEncodedNameOrId = function () {\n        return this.id || encodeURIComponent(this.name);\n    };\n    Table.prototype._createRecords = function (recordsData, optionalParameters, done) {\n        var _this = this;\n        var isCreatingMultipleRecords = Array.isArray(recordsData);\n        if (!done) {\n            done = optionalParameters;\n            optionalParameters = {};\n        }\n        var requestData;\n        if (isCreatingMultipleRecords) {\n            requestData = __assign({ records: recordsData }, optionalParameters);\n        }\n        else {\n            requestData = __assign({ fields: recordsData }, optionalParameters);\n        }\n        this._base.runAction('post', \"/\" + this._urlEncodedNameOrId() + \"/\", {}, requestData, function (err, resp, body) {\n            if (err) {\n                done(err);\n                return;\n            }\n            var result;\n            if (isCreatingMultipleRecords) {\n                result = body.records.map(function (record) {\n                    return new record_1.default(_this, record.id, record);\n                });\n            }\n            else {\n                result = new record_1.default(_this, body.id, body);\n            }\n            done(null, result);\n        });\n    };\n    Table.prototype._updateRecords = function (isDestructiveUpdate, recordsDataOrRecordId, recordDataOrOptsOrDone, optsOrDone, done) {\n        var _this = this;\n        var opts;\n        if (Array.isArray(recordsDataOrRecordId)) {\n            var recordsData = recordsDataOrRecordId;\n            opts = isPlainObject_1.default(recordDataOrOptsOrDone) ? recordDataOrOptsOrDone : {};\n            done = (optsOrDone || recordDataOrOptsOrDone);\n            var method = isDestructiveUpdate ? 'put' : 'patch';\n            var requestData = __assign({ records: recordsData }, opts);\n            this._base.runAction(method, \"/\" + this._urlEncodedNameOrId() + \"/\", {}, requestData, function (err, resp, body) {\n                if (err) {\n                    done(err);\n                    return;\n                }\n                var result = body.records.map(function (record) {\n                    return new record_1.default(_this, record.id, record);\n                });\n                done(null, result);\n            });\n        }\n        else {\n            var recordId = recordsDataOrRecordId;\n            var recordData = recordDataOrOptsOrDone;\n            opts = isPlainObject_1.default(optsOrDone) ? optsOrDone : {};\n            done = (done || optsOrDone);\n            var record = new record_1.default(this, recordId);\n            if (isDestructiveUpdate) {\n                record.putUpdate(recordData, opts, done);\n            }\n            else {\n                record.patchUpdate(recordData, opts, done);\n            }\n        }\n    };\n    Table.prototype._destroyRecord = function (recordIdsOrId, done) {\n        var _this = this;\n        if (Array.isArray(recordIdsOrId)) {\n            var queryParams = { records: recordIdsOrId };\n            this._base.runAction('delete', \"/\" + this._urlEncodedNameOrId(), queryParams, null, function (err, response, results) {\n                if (err) {\n                    done(err);\n                    return;\n                }\n                var records = results.records.map(function (_a) {\n                    var id = _a.id;\n                    return new record_1.default(_this, id, null);\n                });\n                done(null, records);\n            });\n        }\n        else {\n            var record = new record_1.default(this, recordIdsOrId);\n            record.destroy(done);\n        }\n    };\n    Table.prototype._listRecords = function (limit, offset, opts, done) {\n        var _this = this;\n        if (!done) {\n            done = opts;\n            opts = {};\n        }\n        var listRecordsParameters = __assign({ limit: limit,\n            offset: offset }, opts);\n        this._base.runAction('get', \"/\" + this._urlEncodedNameOrId() + \"/\", listRecordsParameters, null, function (err, response, results) {\n            if (err) {\n                done(err);\n                return;\n            }\n            var records = results.records.map(function (recordJson) {\n                return new record_1.default(_this, null, recordJson);\n            });\n            done(null, records, results.offset);\n        });\n    };\n    Table.prototype._forEachRecord = function (opts, callback, done) {\n        var _this = this;\n        if (arguments.length === 2) {\n            done = callback;\n            callback = opts;\n            opts = {};\n        }\n        var limit = Table.__recordsPerPageForIteration || 100;\n        var offset = null;\n        var nextPage = function () {\n            _this._listRecords(limit, offset, opts, function (err, page, newOffset) {\n                if (err) {\n                    done(err);\n                    return;\n                }\n                for (var index = 0; index < page.length; index++) {\n                    callback(page[index]);\n                }\n                if (newOffset) {\n                    offset = newOffset;\n                    nextPage();\n                }\n                else {\n                    done();\n                }\n            });\n        };\n        nextPage();\n    };\n    return Table;\n}());\nmodule.exports = Table;\n"]},"metadata":{},"sourceType":"script"}